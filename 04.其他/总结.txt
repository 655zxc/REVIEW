vue-cli,排序,性能优化,vue3
1.缓存
    - cookie
        Cookie是服务器发送到浏览器的一小段数据，会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。
        Cookie用来记录一些用户相关的一些状态。
        会话状态管理（[如用户登录状态]、购物车、游戏分数或其它需要记录的信息）
        个性化设置（如用户自定义设置、主题等）
        浏览器行为跟踪（如跟踪分析用户行为等）

    - webStorage: localStorage 和 sessionStorage

        webStorage是本地存储，数据不是由服务器请求传递的。
        不会随着 http 请求被发送到服务端。

        localStorage/sessionStorage + setItem/getItem/removeItem/clear(不带Item)

    - 比较
        生命周期：
            cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效
            localStorage：除非被手动清除，否则将会永久保存。
            sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。

        存放数据大小：
            cookie：4KB左右
            localStorage和sessionStorage：可以保存5MB的信息。

        http请求：
            cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题
            localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信

2.模块化 ES6
    就是将独立的功能代码封装成一个独立的文件，其他模块需要使用，在进行引用
    - 通用的导入方式
        引入 m1.js 模块内容
        import * as m1 from "./src/js/m1.js";
        m1.teach();
        引入 m2.js 模块内容
        import * as m2 from "./src/js/m2.js";
        m2.findJob();
        引入 m3.js 
        import * as m3 from "./src/js/m3.js";
        m3.default.change();

        1,2,3是分别,统一,默认,as后面接名字(默认需要加一个.default)

    - 解构赋值形式
        import {school, teach} from "./src/js/m1.js";//对于分别暴露
        import {school as guigu, findJob} from "./src/js/m2.js";
        import {default as m3} from "./src/js/m3.js";

    - 简便形式  仅针对默认暴露
        import m3 from "./src/js/m3.js";


    分别暴露
        export A
        export B
        ...
    统一暴露
        export {A,B,...}
    默认暴露
        export default{
            A 
            B
            ...
        }

3.跨域
    URL
        统一资源定位符，用于定位互联网上资源，俗称网址
        协议+域名+端口号+路径+参数
    同源策略
        源=协议+域名+端口号
        如果两个url的协议、域名、端口号完全一致，那么这两个url就是同源的
        不同源之间的页面，不准互相访问数据
        之所以会产生跨域这个问题呢，其实也很容易想明白，要是随便引用外部文件，
        不同标签下的页面引用类似的彼此的文件，浏览器很容易懵逼的，安全也得不到保障了就。
    什么是跨域
        不同域之间相互请求资源，就算作“跨域”。但是由于同源策略的限制，导致我们无法实现跨域。
    解决方案
        https://juejin.cn/post/6844903448903696398#heading-6
        https://juejin.cn/post/6844903972742889480#heading-0
        1.JSONP
            声明一个回调函数，其函数名(如show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的data)。
            创建一个<script>标签，把那个跨域的API数据接口地址，赋值给script的src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。
            服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是show，它准备好的数据是show('我不爱你')。
            最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。

            JSONP的优点是：它的兼容性更好，在更加古老的浏览器中都可以运行，
            JSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；
        2.CORS
            整个CORS通信过程，都是浏览器自动完成，不需要用户参与。CORS通信与同源的AJAX通信没有差别，代码完全一样。
            服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来进行的。
            表示服务器可以接收哪些域名的请求

            对于简单请求，浏览器直接发出CORS请求。在头信息之中，增加一个Origin字段。
            Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。
            浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了
            如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。
            
            CORS和JSONP对比
                JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。
                使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理
        3.服务器代理
            实现原理：同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。
            创建一个和前台端口号相同的代理服务器,让前台和代理服务器交流,代理服务器和访问服务器交流
            为什么两个8080不会冲突?浏览器是访问8080端口，而不是占用端口，8080上只有一个代理服务器在监听。
            可以用nginx开启,但本项目使用vue-cli开启
            https://blog.csdn.net/weixin_41819098/article/details/88053296
            如果代理服务器本身就有前端要的资源,那就直接给,不会再去请求访问服务器

4.计算机网络
    4.1.http
        HTTP 是一个在计算机两点之间传输文字、图片、音频、视频等超文本数据的约定和规范
        4.1.1.报文(请求和响应信息可以用这个表示)
            https://juejin.cn/post/6994629873985650696
        4.1.2.方法
            https://juejin.cn/post/6992146726500958239
            GET 获取资源,是安全的,不会修改和增加数据
            POST 提交数据，请求服务器进行处理（例如提交表单或者上传文件）,可能会创建新的资源或修改现有资源
            HEAD 与GET方法一样，都是向服务器发出指定资源的请求，只不过服务器将不传回资源的本文部分，只返回头部消息
                 比如可以通过查看响应中的状态码，可以确定资源是否存在，通过查看首部，测试资源是否被修改

            PUT 将数据发送到服务器来创建/更新资源,与 POST 方法的区别在于调用一次与连续调用多次是等价的（即没有副作用），
                比如一个例子是网不好的时候，post提交后没收到响应，于是客户端再次尝试提交，
                成功后刷新看到新建了两条资源，如果用put的话就不会出现这样的情况
            DELETE 请求服务器删除指定 URL 所对应的资源
            TRACE 
            PATCH
            OPTIONS
            CONNECT
        4.1.3.GET/POST区别
            GET 和 POST 方法只是 HTTP 协议为了不同分工而规定的两种请求方式。
            HTTP 是什么？HTTP 是基于 TCP/IP 的关于数据如何在万维网中如何通信的协议。
            HTTP 的底层是 TCP/IP。所以 GET 和 POST 的底层也是 TCP/IP，也就是说，GET 和 POST 都是 TCP 链接。所以说，它们的本质是相同的。
            GET 和 POST 之所以产生，要通过HTTP的规则和浏览器/服务器的限制进行区分，使它们在应用过程中体现出不同。
            https://juejin.cn/post/6992933721703710750
            1.作用,检索获取,创建更新
            2.参数一个在url,一个在主体(GET 也可以通过 params 携带参数，而 POST 的URL 后面也可以携带参数，只是我们通常不建议这么做而已)
            3.安全性不同(但post也不是安全的,因为http是明文的,要用https加密)
            4.参数长度限制不同(是浏览器对url的限制,而不是http)
            5.缓存机制不同
                GET 在浏览器回退时是无害的，而 POST 会再次提交请求
                GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留
            6.编码方式不同 GET请求只能进行URL编码，而POST支持多种编码方式
        4.1.4.状态码
            https://juejin.cn/post/6844903519447678990
            200 204 206
            301 302 304
            400 401 403 404
            500 503
        4.1.5.特点和缺点
            https://juejin.cn/post/6994629873985650696

    4.2.https 
        HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，
        为了保证这些隐私数据能加密传输，设计了SSL/TLS协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。

    4.3.IP
        4.3.1.IPv4
            IP 地址就是连接网络中的所有主机进行通信的目标地址，因此，在网络上的每个主机都需要有自己的 IP 地址。
            IP由四组八位二进制组成
            IP=网络号+主机号
                取32位中的前几位是网络号,后面为主机号,就可以得到网络号的数量和主机号的数量
            子网掩码:比如C类IP,前24位是网络号,后8位是主机号,可以把6位变成子网,每个子网有2位主机号,即4个主机
        4.3.2.IPv6 
            IPv4地址不够,数量有限,IPv6是128位二进制,在表示时用十六进制表示,而不是十进制,用:连接

    4.4.DNS域名解析 
        将域名解析为IP
        4.4.1.域名结构
            看图
            WWW代表主页,还有mail代表邮箱页面
            bilibili 
            com cn gov 顶级域名

    4.5.区别
        IP地址：IP地址是用来标识互联网上计算机的一串数字。也就像每个人都有自己的身份证。
                每台机器进行信息交互的时候都是通过IP地址来定位对方。
        域名：IP地址都是数字，不容易进行记忆，所以就演化出来了域名。
              域名是用符号化的地址来代替数字型的地址。每一个符号化的地址都与特定的数字地址相对应。
        DNS：域名相比于IP地址来说比较好记忆，但是机器之间只能互相认识IP地址，
            所以我们需要将域名转化为IP地址。而这个转化的工作我们将其称为域名解析，
            域名解析需要由专门的服务器来完成，而DNS就是专门的域名解析服务器，域名的最终指向是IP。
        URL：统一资源定位符。俗称“网址”，网址的格式为：
            <协议>://<域名或IP>:<端口>/<路径>。<协议>://<域名或IP>是必需的，<端口>/<路径>有时可省略

    4.6.TCP三次握手四次挥手
        https://juejin.cn/post/6844904070889603085
        TCP是传输层的协议,HTTP是应用层的协议,IP是网络层的协议
        4.6.1.和http的区别
            TCP是传输层，而http是应用层,http是要基于TCP连接基础上的
            简单的说，TCP就是单纯建立连接，不涉及任何我们需要请求的实际数据，简单的传输。http是用来收发数据，即实际应用上的
        4.6.2.tcp首部报文的一些组成部分
            1.序号Sequence Number(seq):
                本报文段所发送的数据的第一个字节的序号
                100kb 的 HTML 文档分割成四个等分之后
                第一个 TCP 报文段包含的是第一个 25kb 的数据，0 ~ 25599 字节， 该报文的序号的值就是：0
                第二个 TCP 报文段包含的是第二个 25kb 的数据，25600 ~ 51199 字节，该报文的序号的值就是：25600
                ...
            2.确认号Acknowledgemt Number(ack):
                期望收到对方下一个报文段的序号值
            3.标志位 TCP Flags:
                - 确认 ACK
                    当 ACK = 1 的时候，确认号（Acknowledgemt Number）有效。
                    在连接建立后所有传送的报文段都必须把 ACK 设置为 1
                - 同步 SYN
                    当 SYN = 1 的时候，表明这是一个请求连接报文段
                - 终止 FIN 
                    当 FIN = 1 时，表示此报文段的发送方的数据已经发送完毕，并要求释放 TCP 连接
        4.6.3.三次握手
            TCP 的三次握手，是需要确认双方的两样能力: 发送的能力和接收的能力
            第一次:客户端向服务端发起连接,SYN=1(请求连接),生成一个随机序列号seq=x
            第二次:服务端确认收到,并向客户端发起连接,SYN=1(请求连接),生成一个随机序列号seq=y,ACK=1(已成功确认消息,确认消息有效),ack=x+1
            现在,客户端知道没问题,但是服务端不知道客户端是否成功接收第二次的信息,因此客户端需要说明自己收到了
            第三次:客户端向服务端发送报文,确认收到,ACK=1(已成功确认消息,确认消息有效),ack=y+1,seq=x+1(不重要?)

            可以发现,SYN是需要消耗一个seq的,下次发送对应的ack要加1,用于确认连接, 而 ACK 并不需要

            为什么不是二次?无法确认客户端接受能力
            为什么不是四次?三次即可,多了没用

            此时,TCP连接建立,就可以发送http请求了
        4.6.4.四次挥手
            TCP断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走
            第一次:客户端向服务端发送报文,说明自己要断开了,FIN=1,seq=p(不是随机的,根据客户端之前发送的数据决定的)
            第二次:服务端接收后向客户端确认,知道了,但服务端还没准备好断开,客户端你先等一会,ACK=1,ack=p+1

            此时服务端知道客户端不给自己发数据了,但客户端无法确认服务端是否还要传输数据
            服务器可能还有数据没有传完，所以不能在第二步直接回FIN=1,因此二三步分开了

            第三次:服务端向客户端发送报文,说明自己要断开了,FIN=1,ACK=1,seq=q,ack=p+1
            第四次:客户端接收后向服务端确认,知道了,ACK=1,ack=q+1

            注意了，这个时候，客户端需要等待足够长的时间，具体来说，是 2 个 MSL(报文最大生存时间)
            在这段时间内如果客户端没有收到服务端的重发请求，那么表示 ACK 成功到达，挥手结束，否则客户端重发 ACK。

            如果不等待? 
            客户端直接跑路，当服务端还有很多数据包要给客户端发，且还在路上的时候，
            若客户端的端口此时刚好被新的应用占用，那么就接收到了无用数据包，造成数据包混乱。

            为什么要等待 2 MSL? 
            上边我们说了服务器收到了最后一次的ACK报文之后就会关闭,
            那客户端是不知道服务器是否收到了这次ACK的, 所以客户端只能在这等待,
            如果服务器在"超时时间"内真的没有收到最后一次的ACK,就会重新发送一次FIN,
            这次重发FIN需要1MSL的时间, 这一来一回需要的时间总和为:服务器超时时间+1MSL, 那为了保险起见,直接让客户端等待2MSL的时间, 如果2MSL之内客户端没有收到重发的FIN, 则默认为服务器收到了最后一次ACK,此时客户端就可以执行关闭了.
            1 个 MSL 确保四次挥手中主动关闭方最后的 ACK 报文最终能达到对端
            1 个 MSL 确保对端没有收到 ACK 重传的 FIN 报文可以到达

            为什么是四次挥手而不是三次？
            因为服务端在接收到FIN, 往往不会立即返回FIN, 必须等到服务端所有的报文都发送完毕了，才能发FIN。
            因此先发一个ACK表示已经收到客户端的FIN，延迟一段时间才发FIN。这就造成了四次挥手。

            如果是三次挥手会有什么问题？
            等于说服务端将ACK和FIN的发送合并为一次挥手(服务端可能还要发送数据,这个操作会延迟)
            这个时候长时间的延迟可能会导致客户端误以为FIN没有到达客户端，从而让客户端不断的重发FIN。

    4.7.URL输入后发生了什么
        DNS 解析:将域名解析成 IP 地址
        TCP 连接：TCP 三次握手
        发送 HTTP 请求
        服务器处理请求并返回 HTTP 报文
        浏览器解析渲染页面
        断开连接：TCP 四次挥手

    4.8.端口
        软件会监听端口,计算机收到的数据包中会含有目标端口
        每个网络程序，无论是客户端还是服务器端，都对应一个或多个特定的端口号
        使用端口号，可以找到一台设备上唯一的一个程序
        所以如果需要和某台计算机建立连接的话，只需要知道IP地址或域名即可
        但是如果想和该台计算机上的某个程序交换数据的话，还必须知道该程序使用的端口号
        ip地址类似于你的家的地址，这是固定的，是唯一的
        你家可以有很多门，不同的门就是端口

    4.9.OSI和TCP/IP模型
        看图
        应用层:应用层为软件提供接口,设置与另外一个应用软件的通信,HTTP
        表示层:将数据转化为接收者能够理解的格式,还可以处理数据的加密,压缩
        会话层:负责建立和断开通信连接,以及数据的分割(收到的数据分别是哪些软件的)传输(怎么发送给这些软件)
        传输层:建立端口到端口的通信,TCP
        网络层:建立主机到主机的通信,IP
        数据链路层:规定0,1的组成意义,数据链路层会将0、1序列划分为具有意义的数据帧传送给对端
        物理层:电脑连接的物理手段,如电缆,光纤,负责传输0,1的电信号

5.ajax
    5.1.概念
        Ajax是一种异步请求数据的技术
        在不需要重新刷新页面的情况下，Ajax 通过异步请求(不会打断用户操作)与服务器通信，并在网页上呈现出来。
    5.2.原生ajax几个步骤
        1.new创建 XMLHttpRequest 对象
        var ajax = new XMLHttpRequest();

        2.open规定请求的类型、URL 以及是否异步处理请求。
        ajax.open('GET',url,true);

        3.发送信息至服务器时内容编码类型,设置请求头
        ajax.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); 

        4.send发送请求(post的参数可以放在这里)
        ajax.send();  

        5.onreadystatechange事件绑定 处理服务端返回的结果
          readystate 是 xhr 对象中的属性, 表示状态 0 1 2 3 4
          状态由0-4变化 0是开始的时候 4是返回了所有的结果
        ajax.onreadystatechange = function () {
            if (obj.readyState == 4 && (obj.status == 200 || obj.status == 304)) { 
            }
        };
    5.3.JSON
        字符串转对象 JSON.parse(json)
        对象转字符串 JSON.stringify(json)
    5.4.其他
        .timeout 超时时间
        .ontimeout 超时回调函数

6.axios
    6.1.使用 一般写在回调函数里,比如click的回调函数
        - axios()方法型
            axios({
                method:类型,
                url:...,
                data:{
                    参数
                }
            }).then(...)

        - 另一种 调用型
            axios.get('url').then(...)
            axios.post('url',{数据},config).then(...)
            ...
        发送axios都会返回一个promise,需要then处理
    6.2.axios实例
        根据指定配置创建一个新的 axios, 也就就每个新 axios 都有自己的配置
        为什么需要?项目中有部分接口需要的配置与另一部分接口需要的配置不太一样
             创建实例对象,配置基本参数
             let instance = axios.create({
               baseURL:'http://localhost:8080',//基本请求路径
               timeout:1000,//超时设定
             })
             调用实例对象,参数使用配置好的
             instance.get('/data.json').then(res=>{
                console.log(res)
             })
    6.3.参数配置 
        全局  axios.defaults.
        实例  let instance = axios.create({})
        请求配置  instance.get('/data.json',{timeout:5000})
    6.4.拦截器 
        在发起请求前做一些处理，再发起请求后再做一些处理,调用 axios()并不是立即发送 ajax 请求, 而是需要经历一个较长的流程
        请求拦截器2 => 请求拦截器1 => 发ajax请求 => 响应拦截器1 => 响应拦截器 2 => 请求的回调(发送axios都会返回一个promise,需要then处理)

        - 请求拦截器 对请求处理 满足放行 不满足停止
             axios.interceptors.request.use(
               config=>{
                 //在发送请求前做些什么
                 return config
               },
               err=>{
                 // 在请求错误的时候做些什么（此处错误，请求没有到后端）
                 return Promise.reject(err)//这里返回一个promise对象
               }
             )
        - 响应拦截器 对结果处理 满足放行 不满足停止
             axios.interceptors.response.use(
               res=>{
                  //请求成功对响应数据进行处理
                  return res
               },err=>{
                  //响应错误做些什么（此处错误，到达后端后返回）
                  return Promise.reject(err)
               }
             )
    6.5.axios二次封装
        详见项目

7.手写
    7.1.防抖
        https://www.bilibili.com/video/BV17b4y1X7yp?from=search&seid=16861340772311675258&spm_id_from=333.337.0.0
        如果短时间内大量触发同一事件，只会执行一次函数。
        在第一次触发事件时，不立即执行函数，而是给出一个期限值比如200ms，然后：
        如果在200ms内没有再次触发滚动事件，那么就执行函数
        如果在200ms内再次触发滚动事件，那么当前的计时取消，重新开始计时

        实现思路:
                                              ->点击触发函数(时间内再次触发函数)...
            点击触发函数->清除定时器->开启定时器
                                              ->执行事件(时间过)

        代码:
            dom节点.addEventListener('事件',防抖函数(回调函数,间隔时间))

            防抖函数(参数1回调函数,参数2间隔时间){
                let timer
                let args = arguments
                return 函数(){
                    let context = this
                    cleartimeout(timer)
                    timer = 定时器(参数1回调函数.apply(context,args),参数2间隔时间)
                }
            }

            回调函数(){
                ...
            }

            注意点1
            由于作用域链的关系,每个return执行的函数都能访问到同一个timer,从而清除开启它
            如果放在return函数里,那timer都是独立的

            注意点2
            会发现回调函数的this是window,因为在定时器里,是最后执行的
            在定时器外保存this,使用apply改变定时器内回调函数的this

            注意点3
            参数

    
    7.2.节流
        https://www.bilibili.com/video/BV11Z4y1c7C9/?spm_id_from=333.788
        如果你持续触发事件，每隔一段时间，只执行一次事件
        控制轮播图没有滚完不能再次滚也是用的节流

        实现思路:
                        ->如果定时器被赋值了,不执行任务
            点击触发函数
                        ->如果定时器没有被赋值,赋值,执行完毕后清除定时器

        代码:
            dom节点.addEventListener('事件',节流函数(回调函数,间隔时间))

            节流函数(参数1回调函数,参数2间隔时间){
                let timer
                let args = arguments
                return 函数(){
                    let context = this
                    if(timer){
                        return
                    }
                    timer = 定时器(function(){参数1回调函数.apply(context,args),timer=null},参数2间隔时间)
                }
            }

            回调函数(){
                ...
            }
    
    7.3.数组扁平化
        将多层数组变为一层
        https://juejin.cn/post/6974013718447423502
        7.3.1.
            数组.falt(层数) ES6新增
        7.3.2.
            递归
            函数(arr){
                定义新的空数组result
                遍历arr{
                    如果不是数组{
                        result.push
                    }
                    如果是数组{
                          result = result.concat(flatten(item))
                          //flatten(item) 最终会得到一个数组,用concat连接起来
                    }
                }
                return result
            }
        7.3.3.
            扩展运算符实现
            循环遍历数组,直到每一项都不是数组{
                arr = [].concat(...arr)
            }

            ...arr会把数组变成一串字符串,再用concat连接,会让第一层的数组[]消失,如此循环遍历下去,让全部数组消失

    7.4.去重
        https://juejin.cn/post/6844904031425413128#comment
        7.4.1.set 
            [...new Set(arr)]
        7.4.2.filter 
            使用filter遍历数组
            return array.indexOf(item) === index
            //返回元素第一次出现的下标,如果等于它自己,说明它是第一次出现,通过filter筛选,否则是多次出现

8.打包优化/加快首屏加载速度
    https://juejin.cn/post/7074878271787597861#comment
    由于网络延迟,文件体积过大,导致加载页面变慢
    8.1.路由懒加载
    8.2.按需引入
        我们在引入elementUI组件时，并不需要一次性完整引入，只需要将我们需要的组件引入即可。
    8.3.CDN 
        内容分发网络（CDN）是一组分布在多个不同地理位置的 Web 服务器。
        当服务器离用户越远时，延迟越高。CDN 在多个位置部署服务器，让用户离服务器更近，从而缩短请求时间。

        引入vuex router elementui等插件后,最后打包出来的体积会很大
        采用CDN引入，在index.html使用CDN引入，在并webpack配置。
        打包之后webpack会从外部打包第三方引入的库,减小app.js的体积，从而提高首屏加载速度

        是不是可以这么理解，原来是一次拉个大的，现在是五次拉，而且五次同时进行
        可以并发下载，还可以把请求发到不同的服务器，避开单站点并发限制

9.路由懒加载
    懒加载简单来说就是延迟加载或按需加载，即在需要的时候的时候进行加载
    export default new Router({
    routes: [
        {
        path: '/',
        name: 'HelloWorld',
        component: ()=>import("@/components/HelloWorld")
        }
    ]
    })
    不用在头部引入

10.动态组件
    https://juejin.cn/post/6916722151835844622
    <component :is="componentId"></component>
    写一个component标签,bind绑定is属性,值为一个组件对象
    通过切换componentId的值实现组件的切换

    这表示当我们每次去切换 component 的时候，模板（component 中的 template）总会去重新渲染
    而我们知道每次的 DOM 渲染其实是很消耗性能的操作，那么如果想要避免这样反复渲染的话可以通过 <keep-alive> 标签来告诉 Vue，
    去缓存已经被渲染过的 component。

11.异步组件
    https://www.bilibili.com/video/BV1YT4y1w7FT/?spm_id_from=333.788.recommend_more_video.-1
    把一些非首屏的页面做成异步加载,在引入的时候,写成一个箭头函数引入
    VUE组件{
        components:{
            List:()=>import(/*webpackchunkname:XX*/'路径')
        }
    }
    他会在我们需要的时候,发送ajax请求,下载组件的js代码

    如果想写更多配置 定义一个箭头函数 返回一个对象 在对象里配置
    在父组件script里写
    const a = () => ({
        component:import(/*webpackchunkname:XX*/'路径')
        loading:
        error:
        ...
    })
    然后在vue父组件的component里正常引入
    VUE组件{
        components:{
            a
        }
    }

12.hash/history
    https://juejin.cn/post/6993840419041706014
    https://www.bilibili.com/video/BV13i4y1L7Qn?from=search&seid=15601877423458990081&spm_id_from=333.337.0.0
    
    - hash 
        基于浏览器的hashchange事件，
        地址变化时，通过window.location.hash 获取地址上的hash值；设置与hash值对应的路由组件内容

        通过location.href可以修改url,hashchange会在hash发生变化时触发

    - history 
        基于HTML5新增的pushState()和replaceState()两个api，以及浏览器的popstate事件，
        地址变化时，通过window.location.pathname找到对应的组件。设置与pathname值对应的路由组件内容

        pushState()和replaceState()用来改变添加/修改历史记录条目,改变路由,也就是history,popstate会在历史记录发生变化时触发
        调用history.pushState()或者history.replaceState()不会触发popstate事件.pushState事件只会在其他浏览器操作时触发, 比如点击后退按钮

    - 两者对比
        1.有井/无井           
        2.hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。
          history不会在URL中出现井号，与HTTP保持一致以/开头，所以当history发生改变时会重新加载页面
        3.hash不需要服务端配置,history需要在服务器配置一个回调路由

13.按钮权限
    https://www.bilibili.com/video/BV1fP4y177Av?from=search&seid=6948569558830312741&spm_id_from=333.337.0.0
    写一个自定义指令v-has
    <v-has = 这个按钮需要的权限>某个按钮<>
    那么可以通过binding.value得到这个按钮需要什么权限,值是字符串
    通过配置钩子函数bind(el,binding){
        通过localstorage(应该是通过token?)获得用户有的权限
        通过binding.value获得这个按钮需要什么权限
        判断用户有没有
        如果没有,设置el.style.display为none ? 错误的,这个dom节点还是存在
        应该使用原生js 即el.parentnode.removechildnode(el) 移除该节点
        注意,这段代码应该放在settimeout(function(){},0)里,也就是最后,节点渲染完毕,否则还没渲染就执行移除代码,没用
    }
    
14.路由权限    
    根据用户展示相应的路由,称之为异步路由
    不管什么用户都看得到的路由,称之为常量路由

    在路由注册页面,定义所有路由,但不需要注册(new Router中配置)每个路由,需要展示才注册
    定义路由的时候,异步路由放在一个数组里,常量路由放在一个数组里

    常量路由:默认注册,异步路由根据routes数组注册
    异步路由:用户登录会获取token,根据token获取用户信息的时候,会使用vuex
    在action步骤发送API得到信息,信息有用户名,头像,角色,可用的路由等等
    在mutations步骤,会把用户信息保存在state里,并且根据可用路由计算出异步路由,使用router.addRoutes(异步路由)添加异步路由

    
2022.2.22

1.HTML
    1.1.meta标签
        描述网页文档的属性
        5种
        charset
        keywords content=
        description content=
        refresh content=
        viewport

    1.2.html5有哪些更新
         - 语义化标签 6个标签
         - 媒体标签 
         - Web存储
         - canvas（画布）
         - DOM查询操作 document.querySelector()
         - 表单

    1.3.如何理解 HTML 语义化
        语义化是指根据内容（内容语义化），选择合适的标签（代码语义化）。通俗来讲就是用正确的标签做正确的事情。
        有以下优点：
        人更容易读懂，增强了可读性，结构更加清晰，便于团队的开发与维护
        搜索引擎更容易读懂，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。
        (注:SEO,搜索引擎优化。是利用搜索引擎的规则提高网站在搜索的排名。)
        在没有 CSS 样式下，页面也能呈现出很好地内容结构、代码结构

    1.4.script 标签中 defer 和 async 的区别？
        分析script下载和执行,html解析

    1.5.从浏览器地址栏输入 url 到请求返回发生了什么
        ?

    1.6.其他 
        例如img 看笔记
2.CSS
    2.1 盒模型介绍
        - CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型 
            两种盒子模型都是由 content + padding + border + margin
            可以通过 box-sizing 来改变元素的盒模型
        - 水平布局 03.06 满足公式XX,有auto/无auto的情况
        - 垂直布局 03.07  overflow的四个值
        - 垂直外边距的重叠 兄弟/父子
        * display/visibility 03.09

    2.2 css 选择器和优先级
        四种常用
        两种复合
        四种关系
        五种属性
        伪类
        超链接的伪类
        伪元素
        权重:见02.11,优先级由四个值代表,看最高位,然后相加,!important

    !2.3 重排（reflow）和重绘（repaint）的理解
        见掘金

        -什么是重排和重绘
        浏览器下载完页面中的所有组件——HTML标记、JavaScript、CSS、图片之后会解析生成两个内部数据结构——DOM树和渲染树。
        DOM树表示页面结构，渲染树表示DOM节点如何显示。DOM树中的每一个需要显示的节点在渲染树种至少存在一个对应的节点
        （隐藏的DOM元素disply值为none 在渲染树中没有对应的节点）。
        
        一旦DOM和渲染树构建完成，浏览器就开始显示（绘制）页面元素。当DOM的变化影响了元素的几何属性（宽或高），
        浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会因此受到影响。
        浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。这个过程称为重排。完成重排后，浏览器会重
        新绘制受影响的部分到屏幕，该过程称为重绘。
        
        由于浏览器的流布局，对渲染树的计算通常只需要遍历一次就可以完成       
        并不是所有的DOM变化都会影响几何属性，比如改变一个元素的背景色并不会影响元素的宽和高，这种情况下只会发生重绘。

        -几种减少重排重绘的方法
            将多次dom操作变成一个样式,然后更换类名
            批量操作 DOM
            脱离文档流,多次修改,将元素带回到文档中

    2.4 对 BFC 的理解
        - 浮动的简介特点(看看)
        - 通俗来讲：
            BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，
            并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。           
        - 创建BFC的条件：
            元素设置浮动：float 除 none 以外的值；
            绝对定位元素（position 为 absolute 或 fixed ）。
            行内块元素，即 display 为 inline-block/flex
            overflow 的值不为 visible 。
        - BFC 具有一些特性 以及 可以解决的问题
            见掘金
            利用 2 ，我们可以避免 margin  重叠问题。
            利用 3 ，我们可以避免高度塌陷。
            利用 4  和 6 ，我们可以实现三栏（或两栏）自适应布局。
        - 高度塌陷的解决方案
        - clear的原理

    2.5 实现两栏布局（左侧固定 + 右侧自适应布局）
        - 了解定位
            position的五个值
        - 绝对定位的布局
            注意开启了绝对定位的垂直布局
        - 两栏布局的方法
            1.左浮动,设置宽度,右设置左边距,宽度自动
            2.左浮动,设置宽度,右边开启BFC,宽度自动(BFC 的区域不会与浮动元素发生重叠)
            3.父元素开flex,左设置宽度，右设置flex:1(填充剩余空间) flex:1 === flex：1 1 0% 该盒子大小为flex容器的0%
            4.父元素开定位,左绝对定位(脱离文档流),设置宽度,右设置左边距,宽度自动
            5.父元素开定位,左设置宽度,右绝对定位,left是宽度,其他是0

    2.6 实现圣杯布局和双飞翼布局（经典三分栏布局）
        三栏布局，中间一栏最先加载和渲染
        详见https://www.bilibili.com/video/BV17J411x7Mo?from=search&seid=16113089494511753364&spm_id_from=333.337.0.0
        - 圣杯布局法
            把center放在第一行
            子元素全部左float
            父元素清除浮动影响,防止塌陷
            center设置宽度100%铺满
            left的margin-left -100% 从第二行左移动到第一行左
            right的margin-left -自身宽度 从第二行左移动到第一行右
            此时left和right会覆盖center
            使用绝对定位向左向右移动即可
            父元素设置padding 值为left right的宽度,防止left和right移出屏幕
        - 双飞翼布局法
            把center放在第一行
            子元素全部左float
            center设置宽度100%铺满
            left的margin-left -100% 从第二行左移动到第一行左
            right的margin-left -自身宽度 从第二行左移动到第一行右
            此时left和right会覆盖center
            可以看到步骤同上,但是没有父元素,而是center有父元素
            给center设置margin,来避免被left和right覆盖    

    2.7 水平垂直居中多种实现方式
        - 水平垂直居中
            1.绝对定位left right = 50% , transform: translate(-50%, -50%);
            2.绝对定位left right top bottom = 0 , margin auto
            3.绝对定位left right = 50% , margin-left 和 margin-top 是自己的一半的负值
            4.flex,justify-content: center;align-items: center;
            注意,1,4盒子不需要宽高,2,3需要

    2.8 flex 布局
        - 概念
            该布局模型的目的是提供一种更加高效的方式来对容器中的条目进行布局、对齐和分配空间。
            在传统的布局方式中，block 布局是把块在垂直方向从上到下依次排列的；而 inline 布局则是在水平方向来排列。
            弹性盒布局并没有这样内在的方向限制，可以由开发人员自由操作。

        - 了解flex
            display:flex 
            flex-direction:排列方式四种属性
            flex-grow/flex-shrink 可以为0 1 2 3... 元素按比例增缩,缩小时还会参考元素大小,增大不会
            flex-basis 元素长度
            flex-wrap:换行
            justify-content 属性定义了项目在主轴上的对齐方式
            align-content(多行有效) 属性定义了多根轴线的对齐方式。如果项目只有一根轴线(主轴只有一行)，该属性不起作用。
            align-items(一行有效) 属性定义项目在交叉轴上如何对齐

    2.9 line-height 如何继承？
        - 字体
            引入css文件,i标签,class = XX
        - 行高line-height
            行间距 = 行高 - 字体大小
            如果是一个整数的话，行高将会是字体的指定的倍数
            可以将行高设置为和高度一样的值，使单行文字在一个元素中垂直居中
        - 文本的水平垂直对齐
            text-align:center
            vertical-align:middle
        - 继承
            父元素的 line-height 写了具体数值/比例 子元素继承
            百分比 则子元素 line-height 继承的是父元素 font-size * 200% 计算出来的值

    2.10 隐藏元素的方法有哪些
        display: none：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。
        visibility: hidden：元素在页面中仍占据空间，但是不会响应绑定的监听事件。
        opacity: 0：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。
        position: absolute：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。
        z-index: 负值：来使其他元素遮盖住该元素，以此来实现隐藏。

    2.11 实现一个三角形
        宽高设置为0
        设置border为100px
        border-right: 50px solid transparent;隐藏边
        用CSS实现扇形的思路和三角形基本一致，就是多了一个圆角的样式

    2.12 画一条0.5px的线
        transform: scale(0.5,0.5);

    2.14 display 都有哪些属性
        none 
        block
        inline
        inline-block
        table	此元素会作为块级表格来显示
        inherit	规定应该从父元素继承 display 属性的值
        list-item 项目列表

    2.15 块元素和行内元素、行内块元素的区别
        行内元素有：a b span img strong input；
        块级元素有：div ul ol li  h1  p；

        -行内元素
            不会独占一行 默认排列方式为从左到右 排列满了换行
            设置宽高无效；
            对margin仅设置左右方向有效，上下无效；padding设置上下左右都有效，即会撑大空间(不会影响布局)
        -块级元素
            独占一行 多个会垂直排列
            可以设置宽高；宽默认和父元素相等
            设置margin和padding都有效；
        - 行内块元素
            呈现为inline对象(默认排列方式为从左到右 排列满了换行)，但是对象的内容作为block对象呈现
            就是集合了block和inline的全部优点。width、height、margin、padding设置都会生效

    2.16 rem em vm
        https://juejin.cn/post/6963873556304232462
        子元素字体大小的em是相对于父元素字体大小
        元素的width/height/padding/margin用em的话是相对于该元素的font-size

        rem是全部的长度都相对于根元素，根元素是谁？<html>元素。

    2.17 CSS transition/animation的实现效果和有哪些属性
        - transition 过渡
            transition-property 过渡属性
            transition-duration 时间
            transition-timing-function 函数
            transition-delay 延迟
        - animation 动画
            动画和过渡类似，都是可以实现一些动态的效果，
            不同的是过渡需要在某个属性发生变化时才会触发
            动画可以自动触发动态效果
            写法:
                        @keyframes test {
                            /* from表示动画的开始位置 也可以使用 0% */
                            from{
                                margin-left: 0;
                                background-color: orange;
                            } 

                            /* to动画的结束位置 也可以使用100%*/
                            to{
                                background-color: red;
                                margin-left: 700px;
                            }
                        }
            属性:
            animation-name
            animation-duration 
            animation-delay
            animation-timing-function
            animation-iteration-count 执行次数
            animation-direction 执行方向
            animation-play-state 执行状态 
            animation-fill-mode 动画的填充模式
        - transform 变形
            - 平移
                translateX() 沿着x轴方向平移
                translateY() 沿着y轴方向平移
                translateZ() 沿着z轴方向平移
                参数为px和%
                平移元素，百分比是相对于自身计算的
            - 旋转
                rotateX()
                rotateY()
                rotateZ()
                1turn = 360deg = 360度
            - 缩放
                scaleX() 水平方向缩放
                scaleY() 垂直方向缩放
                scale() 双方向的缩放
                参数为整数
                
    2.18 一个满屏品字布局如何设计
        三块高宽是确定的；   
        上面那块用margin: 0 auto;居中；             
        下面两块用float或者inline-block不换行；       
        用margin调整位置使他们居中。

    2.19 响应式布局
        ?

    2.20 CSS3新增
        
    2.21 其他 
        写css的三种方法